/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package domain;

import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author jesus
 */
public class Frame extends javax.swing.JFrame {

    RSyntaxTextArea txtEntrada = new RSyntaxTextArea();
    File archivo;

    public Frame() {
        initComponents();
        this.setLocationRelativeTo(null);
        rsyntax();
    }

    public void rsyntax() {

        txtEntrada.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        txtEntrada.setHighlightCurrentLine(false);
        txtEntrada.setText("//Hola mundo");
        Font font = new Font("Console",Font.PLAIN, 18);
        txtEntrada.setFont(font);
        RTextScrollPane sp = new RTextScrollPane(txtEntrada);
        jPanelPrincipal.add(sp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPrincipal = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSintaxis = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        guardarComo = new javax.swing.JMenuItem();
        cerrar = new javax.swing.JMenuItem();
        salir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        ejecutar = new javax.swing.JMenuItem();
        compilar = new javax.swing.JMenuItem();
        test = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1240, 720));

        jPanelPrincipal.setLayout(new java.awt.CardLayout());

        jScrollPane2.setViewportView(txtSintaxis);

        jTabbedPane1.addTab("Consola", jScrollPane2);

        jScrollPane1.setViewportView(txtResultado);

        jTabbedPane1.addTab("Debugger", jScrollPane1);

        Menu.setText("Archivo");

        abrir.setText("Abrir...");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        Menu.add(abrir);

        guardar.setText("Guardar...");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        Menu.add(guardar);

        guardarComo.setText("Guardar como");
        guardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarComoActionPerformed(evt);
            }
        });
        Menu.add(guardarComo);

        cerrar.setText("Cerrar");
        cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarActionPerformed(evt);
            }
        });
        Menu.add(cerrar);

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        Menu.add(salir);

        jMenuBar1.add(Menu);

        jMenu2.setText("Ejecutar");

        ejecutar.setText("Ejecutar archivo");
        ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarActionPerformed(evt);
            }
        });
        jMenu2.add(ejecutar);

        compilar.setText("Compilar archivo");
        compilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compilarActionPerformed(evt);
            }
        });
        jMenu2.add(compilar);

        test.setText("Test archivo");
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });
        jMenu2.add(test);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Debbuger");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(this);
        archivo = file.getSelectedFile();
        txtEntrada.setText(Archivo.leer(archivo));
    }//GEN-LAST:event_abrirActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarActionPerformed
        try {
            analizarLexico();
            analizarSintaxis();

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_ejecutarActionPerformed

    private void compilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compilarActionPerformed
       try {
            analizarSintaxis();
            txtResultado.setText("");

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_compilarActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
        try {
            analizarLexico();
            txtSintaxis.setText("");
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_testActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        Archivo.guardar(archivo, txtEntrada.getText());
    }//GEN-LAST:event_guardarActionPerformed

    private void cerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarActionPerformed
        txtEntrada.setText("");
        txtResultado.setText("");
        txtSintaxis.setText("");
        archivo = null;
    }//GEN-LAST:event_cerrarActionPerformed

    private void guardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoActionPerformed
        // TODO add your handling code here:
    JFileChooser administrador = new JFileChooser();
    administrador.showSaveDialog(null);
    administrador.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

    archivo = administrador.getSelectedFile();

    Archivo.guardarNuevo(archivo, txtEntrada.getText());
    }//GEN-LAST:event_guardarComoActionPerformed

    private void analizarLexico() throws IOException {
        int cont = 1;
        txtResultado.setContentType("text/html");
        String expr = (String) txtEntrada.getText();
        Lexer lexer = new Lexer(new StringReader(expr));
        
        
        String resultado = "<pre><b><font size=+1>Linea "+ cont + "</font></b>                <b><font size=+1>Simbolo</b></pre>";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                txtResultado.setText(resultado);
                return;
            }
            switch (token) {
                case Linea -> {
                    cont++;
                    resultado += "<hr><pre><b><font size=+1>Linea "+ cont + "</font></b></pre>";
                }
                case Comillas -> resultado += "<pre><font color=Teal>Comillas:</font>                  " + lexer.lexeme + "</pre><br>";
                case Cadena -> resultado += "<pre><font color=Teal>Tipo de dato:</font>              " + lexer.lexeme + "</pre><br>";
                case T_dato -> resultado += "<pre><font color=Teal>Tipo de dato:</font>              " + lexer.lexeme + "</pre><br>";
                case If -> resultado += "<pre><font color=Teal>Reservada if>:</font>             " + lexer.lexeme + "</pre><br>";
                case Else -> resultado += "<pre><font color=Teal>Reservada else:</font>            " + lexer.lexeme + "</pre><br>";
                case Do -> resultado += "<pre><font color=Teal>Reservada do:</font>              " + lexer.lexeme + "</pre><br>";
                case While -> resultado += "<pre><font color=Teal>Reservada while:</font>           " + lexer.lexeme + "</pre><br>";
                case For -> resultado += "<pre><font color=Teal>Reservada while>:</font>          " + lexer.lexeme + "</pre><br>";
                case Igual -> resultado += "<pre><font color=Teal>Operador igual:</font>            " + lexer.lexeme + "</pre><br>";
                case Suma -> resultado += "<pre><font color=Teal>Operador suma:</font>             " + lexer.lexeme + "</pre><br>";
                case Resta -> resultado += "<pre><font color=Teal>Operador resta:</font>            " + lexer.lexeme + "</pre><br>";
                case Multiplicacion -> resultado += "<pre><font color=Teal>Operador multiplicacion:</font>   " + lexer.lexeme + "</pre><br>";
                case Division -> resultado += "<pre><font color=Teal>Operador division:</font>         " + lexer.lexeme + "</pre><br>";
                case Op_logico -> resultado += "<pre><font color=Teal>Operador logico:</font>           " + lexer.lexeme + "</pre><br>";
                case Op_incremento -> resultado += "<pre><font color=Teal>Operador incremento:</font>       " + lexer.lexeme + "</pre><br>";
                case Op_relacional -> resultado += "<pre><font color=Teal>Operador relacional:</font>       " + lexer.lexeme + "</pre><br>";
                case Op_atribucion -> resultado += "<pre><font color=Teal>Operador atribucion:</font>       " + lexer.lexeme + "</pre><br>";
                case Op_booleano -> resultado += "<pre><font color=Teal>Operador booleano:</font>         " + lexer.lexeme + "</pre><br>";
                case Parentesis_a -> resultado += "<pre><font color=Teal>Parentesis de apertura:</font>    " + lexer.lexeme + "</pre><br>";
                case Parentesis_c -> resultado += "<pre><font color=Teal>Parentesis de cierre:</font>      " + lexer.lexeme + "</pre><br>";
                case Llave_a -> resultado += "<pre><font color=Teal>Llave de apertura:</font>         " + lexer.lexeme + "</pre><br>";
                case Llave_c -> resultado += "<pre><font color=Teal>Llave de cierre:</font>           " + lexer.lexeme + "</pre><br>";
                case Corchete_a -> resultado += "<pre><font color=Teal>Corchete de apertura:</font>      " + lexer.lexeme + "</pre><br>";
                case Corchete_c -> resultado += "<pre><font color=Teal>Corchete de cierre:</font>        " + lexer.lexeme + "</pre><br>";
                case Main -> resultado += "<pre><font color=Teal>Reservada main:</font>            " + lexer.lexeme + "</pre><br>";
                case P_coma -> resultado += "<pre><font color=Teal>Punto y coma:</font>              " + lexer.lexeme + "</pre><br>";
                case Identificador -> resultado += "<pre><font color=Teal>Identificador:</font>             " + lexer.lexeme + "</pre><br>";
                case Numero -> resultado += "<pre><font color=Teal>Numero:</font>                    " + lexer.lexeme + "</pre><br>";
                case ERROR -> resultado += "<pre><font color=Teal>Simbolo no definido:</font>           </pre><br>";
                default -> resultado += "<pre>< " + lexer.lexeme + " ></pre><br>";
            }
        }
    }

    private void analizarSintaxis() throws IOException {
        String ST = txtEntrada.getText();
        Sintax s = new Sintax(new domain.LexerCup(new StringReader(ST)));
        txtSintaxis.setContentType("text/html");

        try {
            s.parse();
            txtSintaxis.setText("<font color=Green size=+1>Ejecución con exito</font>");
            //txtSintaxis.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtSintaxis.setText("<font color=Red size=+1>Error de sintaxis<br>"
                    + "Línea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"</font>");
            //txtAnalizarSin.setForeground(Color.red);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Menu;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JMenuItem cerrar;
    private javax.swing.JMenuItem compilar;
    private javax.swing.JMenuItem ejecutar;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanelPrincipal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem salir;
    private javax.swing.JMenuItem test;
    private javax.swing.JEditorPane txtResultado;
    private javax.swing.JEditorPane txtSintaxis;
    // End of variables declaration//GEN-END:variables
}
